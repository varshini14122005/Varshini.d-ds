Algorithm:





Step 1: Start the program.

Step 2: Read the postfix expression from left to right

Step 3: If the symbol read is an operand then push it onto the stack

Step 4: If the operator is read POP two operands and perform arithmetic

operations if operator is

+ then result=operand 1 + operand 2

- then result=operand 1 - operand 2

* then result=operand 1 * operand 2

/ then result=operand 1 / operand 2

Step 5: Push the result onto the stack

Step 6: Repeat steps 2-5 till the postfix expression is not over

Step 7: Stop the program.





















PROGRAM:

#include <stdio.h>

#include <string.h>

int top = -1;

int stack[100];

void push (int data) {

stack[++top] = data;

}

int pop () {

int data;

if (top == -1)

return -1;

data = stack[top];

stack[top] = 0;

top--;

return (data);

}

int main()

 {

char str[100];

int i, data = -1, operand1, operand2, result;

printf("Enter ur postfix expression:");

fgets(str, 100, stdin);

for (i = 0; i < strlen(str); i++)

 {

if (isdigit(str[i])) 

{

data = (data == -1) ? 0 : data;

data = (data * 10) + (str[i] - 48);

continue;

}

if (data != -1)

 {

push(data);

}

if (str[i] == '+' || str[i] == '-'|| str[i] == '*' || str[i] == '/') 

{

operand2 = pop();

operand1 = pop();

if (operand1 == -1 || operand2 == -1)

break;

switch (str[i]) 

{

case '+':

result = operand1 + operand2;

push(result);

break;

case '-':

result = operand1 - operand2;

push(result);

break;

case '*':

result = operand1 * operand2;

push(result);

break;

case '/':

result = operand1 / operand2;

push(result);

break;

}

}

data = -1;

}

if (top == 0)

printf("The answer is:%d\n", stack[top]);

else

printf("u have given wrong postfix expression\n");

return 0;

}

